# -*- coding: utf-8 -*-
"""Logistic_Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nvMdK0PuHK6W0PINnC39DbizVdhRLLo9
"""

#libraries import
import pandas as pd
import seaborn as sns
import numpy as np

#loading dataset
df = sns.load_dataset('iris')
df.head()

#checking types of predictor values
df['species'].unique()

#checking for null-values
df.isnull().sum()

#removing one of the prediction values for binary classification
df = df[df['species']!='setosa']
df.head()

#converting categorical value to numeric value for predictor variable
df['species'] = df['species'].map({'versicolor':0, 'virginica':1})

df['species']

#model-ready dataset
df

#splitting data into independent and dependent features
X = df.iloc[:,:-1]
y = df.iloc[:,-1]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)

#hyperparameter tuning
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression()

from sklearn.model_selection import GridSearchCV
parameter={'penalty':['l1','l2','elasticnet'], 'C':[1,2,3,4,5,6,10,20,30,40,50],'max_iter':[100,200,300]}

classifier_regressor = GridSearchCV(classifier, param_grid=parameter,scoring='accuracy',cv=5)

classifier_regressor.fit(X_train,y_train)

#selecting best parameters
print(classifier_regressor.best_params_)

print(classifier_regressor.best_score_)

#prediction on the test data
from sklearn.metrics import accuracy_score,classification_report
y_pred=classifier_regressor.predict(X_test)
score=accuracy_score(y_pred,y_test)
print(score)

print(classification_report(y_pred,y_test))