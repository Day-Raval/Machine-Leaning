# -*- coding: utf-8 -*-
"""Support_Vector_Regression- Different Kernels.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11nloDTs0dapmrH5cz0j5Fyi2sVo9F23P

# Fitting an SVR Model on the Sine Curve data using Linear Kernel


* First, we will try to achieve some baseline results using the linear kernel on a non-linear dataset
* and we will try to observe up to what extent it can be fitted by the model.
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.svm import SVR

# generate synthetic data
X = np.sort(5 * np.random.rand(40, 1),
			axis=0)
y = np.sin(X).ravel()

# add some noise to the data
y[::5] += 3 * (0.5 - np.random.rand(8))

# create an SVR model with a linear kernel
svr = SVR(kernel='linear')

# train the model on the data
svr.fit(X, y)

# make predictions on the data
y_pred = svr.predict(X)

# plot the predicted values against the true values
plt.scatter(X, y, color='darkorange',
			label='data')
plt.plot(X, y_pred, color='cornflowerblue',
		label='prediction')
plt.legend()
plt.show()

"""# Fitting an SVR Model on the Sine Curve data using Polynomial Kernel

* Now we will fit a Support vector Regression model using a polynomial kernel.
* This will be hopefully a little better than the SVR model with a linear kernel.



"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.svm import SVR

# generate synthetic data
X = np.sort(5 * np.random.rand(40, 1), axis=0)
y = np.sin(X).ravel()

# add some noise to the data
y[::5] += 3 * (0.5 - np.random.rand(8))

# create an SVR model with a linear kernel
svr = SVR(kernel='poly')

# train the model on the data
svr.fit(X, y)

# make predictions on the data
y_pred = svr.predict(X)

# plot the predicted values against the true values
plt.scatter(X, y, color='darkorange',
			label='data')
plt.plot(X, y_pred, color='cornflowerblue',
		label='prediction')
plt.legend()
plt.show()

"""# Fitting an SVR Model on the Sine Curve data using RBF Kernel

* Now we will fit a Support vector Regression model using an RBF(Radial Basis Function) kernel.
* This will help us to achieve probably the best results as the RBF kernel is one of the best kernels which helps us to introduce non-linearity in our model.



"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.svm import SVR

# generate synthetic data
X = np.sort(5 * np.random.rand(40, 1),
			axis=0)
y = np.sin(X).ravel()

# add some noise to the data
y[::5] += 3 * (0.5 - np.random.rand(8))

# create an SVR model with a linear kernel
svr = SVR(kernel='rbf')

# train the model on the data
svr.fit(X, y)

# make predictions on the data
y_pred = svr.predict(X)

# plot the predicted values against the true values
plt.scatter(X, y, color='darkorange',
			label='data')
plt.plot(X, y_pred, color='cornflowerblue',
		label='prediction')
plt.legend()
plt.show()