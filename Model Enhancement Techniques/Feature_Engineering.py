# -*- coding: utf-8 -*-
"""Feature_Engineering - Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12FKvQt4vEC7P3FJUKA6kELlcDNsQ4Uxy
"""

import pandas as pd
import numpy as np

df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/insurance.csv')
df

import seaborn as sns
import matplotlib.pyplot as plt
g=sns.pairplot(data=df[['age','bmi','children','smoker','region','sex','charges']],x_vars=['age','sex','region','smoker'],y_vars=['charges'],aspect=1)

# lets see the impact of age and smoking together
s=sns.pairplot(data=df[['age','bmi','children','smoker','region','sex','charges']],x_vars=['age'],y_vars=['charges'],aspect=1.5,hue='smoker')
s.fig.set_size_inches(9,4)

plt.title('Impact of age and smoking on charges')
plt.show()

# lets see the impact of region and smoking together
import seaborn as sns
import matplotlib.pyplot as plt
g=sns.pairplot(data=df[['age','bmi','children','smoker','region','sex','charges']],x_vars=['age'],y_vars=['charges'],aspect=1.5,hue='region')
g.fig.set_size_inches(9,4)

plt.title('Impact of region and smoking on charges')
plt.show()

#adding an extra feature to the dataset
df['SmokeReg'] = df['smoker']* df['region']
print("Total number of customers = ",df.shape[0])
print("Total number of customers who are smokers and of that region = ",df[df.SmokeReg==1].shape[0])

#creating a pandas dataframe with the features and the pandas series with the target
X = df[['age','bmi','children','smoker','sex','region','SmokeReg']]
y = df['charges']

#Train the model using the additional feature
from sklearn import linear_model
lr = linear_model.LinearRegression()
lr.fit(X,y)
#printing the coefficients of the trained model
coeffs=pd.DataFrame(lr.coef_,X.columns,columns=["Coefficient"])
coeffs

#predicting on the dataset
predictions = lr.predict(X)

#compare with actual charges
Scores = pd.DataFrame({'Actuals':y,'Predictions':predictions})
Scores.head(5)

#compute the accuracy metrics
from sklearn import metrics
print("MAE:",metrics.mean_absolute_error(y,predictions))
print("RMSE:",np.sqrt(metrics.mean_squared_error(y,predictions)))
print("Avg. Cost:",y.mean())
print("R-squared:",metrics.r2_score(y,predictions))